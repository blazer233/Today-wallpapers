[{"F:\\code_git\\Today-wallpapers\\src\\index.js":"1","F:\\code_git\\Today-wallpapers\\src\\App.js":"2","F:\\code_git\\Today-wallpapers\\src\\Content\\index.js":"3","F:\\code_git\\Today-wallpapers\\src\\Content\\Content.js":"4","F:\\code_git\\Today-wallpapers\\src\\utils.js":"5"},{"size":204,"mtime":1613964634223,"results":"6","hashOfConfig":"7"},{"size":1844,"mtime":1614582026571,"results":"8","hashOfConfig":"7"},{"size":7339,"mtime":1614565818174,"results":"9","hashOfConfig":"7"},{"size":8396,"mtime":1614413189571,"results":"10","hashOfConfig":"7"},{"size":1008,"mtime":1614582014253,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"14lax4d",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"F:\\code_git\\Today-wallpapers\\src\\index.js",[],["26","27"],"F:\\code_git\\Today-wallpapers\\src\\App.js",["28"],"import React, { useState, useEffect } from \"react\";\r\nimport Content from \"./Content\";\r\nimport { ipcasync, setSchedule } from \"./utils\";\r\nimport {\r\n  MinusSquareOutlined,\r\n  ArrowsAltOutlined,\r\n  ShrinkOutlined,\r\n  EyeInvisibleTwoTone,\r\n  EyeTwoTone,\r\n} from \"@ant-design/icons\";\r\nimport { message } from \"antd\";\r\nexport default () => {\r\n  const [max, setmax] = useState(true);\r\n  const [day, sday] = useState(true);\r\n  const [title, setTitle] = useState(\"👋\");\r\n  const getTitle = res => setTitle(res);\r\n  useEffect(() => {\r\n    message.info(day ? `您已开启每日壁纸` : \"关闭每日壁纸\");\r\n    setSchedule(day);\r\n  }, [day]);\r\n  return (\r\n    <>\r\n      <div className=\"button-icons\">\r\n        <div className=\"drag-icons\">🏂 每日壁纸-{title}</div>\r\n        <div>\r\n          <MinusSquareOutlined\r\n            className=\"button-icon\"\r\n            title=\"最小化\"\r\n            onClick={() => ipcasync(\"mini-icon\")}\r\n          />\r\n          {max ? (\r\n            <ArrowsAltOutlined\r\n              className=\"button-icon\"\r\n              title=\"最大化\"\r\n              onClick={() => {\r\n                ipcasync(\"max-icon\");\r\n                setmax(false);\r\n              }}\r\n            />\r\n          ) : (\r\n            <ShrinkOutlined\r\n              className=\"button-icon\"\r\n              title=\"恢复大小\"\r\n              onClick={() => {\r\n                ipcasync(\"max-icon\");\r\n                setmax(true);\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"show-day\">\r\n        {day ? (\r\n          <EyeTwoTone onClick={() => sday(false)} />\r\n        ) : (\r\n          <EyeInvisibleTwoTone onClick={() => sday(true)} />\r\n        )}\r\n      </div>\r\n      <Content getTitle={getTitle} />\r\n      <div className=\"button-icons-over\"> one wallpaper💎 </div>\r\n    </>\r\n  );\r\n};\r\n","F:\\code_git\\Today-wallpapers\\src\\Content\\index.js",["29","30","31"],"import React, { useEffect, useState } from \"react\";\r\nimport Content from \"./Content\";\r\nimport { executablePath } from \"../../package.json\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\nimport { Spin, message } from \"antd\";\r\nimport { ipcasync, puppeteer, wallpaper, showOpenDialogSync } from \"../utils\";\r\nconst App = ({ getTitle }) => {\r\n  const [result, setResult] = useState([]);\r\n  const [isdown, setdown] = useState(false);\r\n  const [isdownshow, setdownshow] = useState(false);\r\n  const [details, setDetail] = useState([]);\r\n  const [Modals, setModal] = useState({});\r\n  const [screenSize, setScreenSize] = useState({});\r\n  const [path, setPath] = useState(\"\");\r\n  const [headless, setheadless] = useState(true);\r\n  const [panding, setPanding] = useState(\"请稍后\");\r\n  const config = {\r\n    headless,\r\n    executablePath,\r\n    args: [\"--no-sandbox\", \"--disable-setuid-sandbox\"],\r\n  };\r\n  const _init = async (_ = false) => {\r\n    setPanding(\"努力加载中...第一次加载时间会比较长~~~\");\r\n    let { result, workAreaSize } = await ipcasync(\"init-homepage\", _);\r\n    setScreenSize(workAreaSize);\r\n    _ ? getTitle(\"🏠\") : getTitle(\"🌎\");\r\n    _ ? setdownshow(true) : setdownshow(false);\r\n    result ? setResult(result) : newFind();\r\n    setPanding(false);\r\n  };\r\n  useEffect(() => _init(), []);\r\n  const getHomePage = async url => {\r\n    let urls = \"http://desk.zol.com.cn/\" + url;\r\n    const browser = await puppeteer.launch(config);\r\n    const page = await browser.newPage();\r\n    await page.goto(urls);\r\n    await page.waitForSelector(\".wrapper\", { visible: true });\r\n    const arr = await page.$$eval(\".main>ul a\", el =>\r\n      el.map(i => ({\r\n        href: \"http://desk.zol.com.cn\" + i.getAttribute(\"href\"),\r\n        srcmini: i.firstChild.getAttribute(\"src\"),\r\n        title: i.firstChild.getAttribute(\"title\"),\r\n        children: [],\r\n      }))\r\n    );\r\n    browser.close();\r\n    return arr;\r\n  };\r\n  const getPages = async (url, screen) => {\r\n    const browser = await puppeteer.launch(config);\r\n    const page = await browser.newPage();\r\n    await page.goto(url);\r\n    const all = await page.$eval(\".wrapper span\", el => el.textContent);\r\n    const allPage = all.split(\"/\")[1].replace(\"）\", \"\");\r\n    console.log(\"开始\", url);\r\n    await page.waitForSelector(\".wrapper\", { visible: true });\r\n    const arr = await page.$$eval(\"#showImg li a\", el =>\r\n      el.map(i => ({\r\n        href: \"http://desk.zol.com.cn\" + i.getAttribute(\"href\"),\r\n        srcmini:\r\n          i.firstElementChild.getAttribute(\"src\") ||\r\n          i.firstElementChild.getAttribute(\"srcs\"),\r\n      }))\r\n    );\r\n    for (let i = 0; i < arr.length; i++) {\r\n      i && setPanding(`总共爬取 ${allPage} 张,当前爬取第 ${i} 张`);\r\n      await page.goto(arr[i].href);\r\n      await page.waitForSelector(`#tagfbl`, { visible: true });\r\n      const hrefItems = await page.evaluate(\r\n        el =>\r\n          document.querySelector(el)\r\n            ? document.querySelector(el).getAttribute(\"href\")\r\n            : document.querySelector(`a[id=\"1920x1080\"]`)\r\n            ? document.querySelector(`a[id=\"1920x1080\"]`).getAttribute(\"href\")\r\n            : document.querySelector(`#tagfbl a`).getAttribute(\"href\"),\r\n        `a[id=\"${screen}\"]`\r\n      );\r\n      await page.goto(\"http://desk.zol.com.cn\" + hrefItems);\r\n      await page.waitForSelector(\"body img\", { visible: true });\r\n      const hrefItem = await page.$eval(\"body img\", el => el.src);\r\n      arr[i].maxsrc = hrefItem;\r\n      details.push(arr[i]);\r\n      setDetail(details);\r\n    }\r\n    setPanding(`爬取完成。请稍后`);\r\n    browser.close();\r\n  };\r\n  const handerchilden = async (title, href) => {\r\n    console.log(title, href, screenSize);\r\n    setModal({ title, href });\r\n    setPanding(\"正在从数据库拉取数据~~~\");\r\n    let res = await ipcasync(\"init-collect\", href);\r\n    if (res) {\r\n      setDetail(res);\r\n    } else {\r\n      try {\r\n        setPanding(\"数据库未查询到，正在拉取新数据~~~\");\r\n        let { width, height } = screenSize;\r\n        let size =\r\n          height < 1100 && height > 1000\r\n            ? `1920x1080`\r\n            : height < 1600 && height > 1100\r\n            ? `2560x1440`\r\n            : height < 1900 && height > 1600\r\n            ? `2880x1800`\r\n            : `${width}x${height}`;\r\n        await getPages(href, size);\r\n      } catch (error) {\r\n        message.info(`网络异常未能全部下载成功`);\r\n        setPanding(false);\r\n        setDetail(details);\r\n      }\r\n      ipcasync(\"init-collect-add\", { href, resultHref: details });\r\n      setdown(true);\r\n      Notification.requestPermission(\r\n        () => new Notification(\"hi~\", { body: `\" ${title} \"获取完成` })\r\n      );\r\n    }\r\n    setPanding(false);\r\n  };\r\n  const opendevtool = async () => await ipcasync(\"init-devtool\");\r\n  const deleteAll = async () => {\r\n    setResult([]);\r\n    setPanding(`删除全部壁纸重新获取......`);\r\n    let res = await ipcasync(\"init-delete\");\r\n    res && _init();\r\n  };\r\n  const saveWallpaper = () => {\r\n    const filepath = showOpenDialogSync({\r\n      properties: [\"openDirectory\", \"createDirectory\", \"promptToCreate\"],\r\n    });\r\n    console.log(filepath);\r\n    setPath(filepath && filepath[0]);\r\n  };\r\n  const setWallpaper = async url => {\r\n    setPanding(\"正在设置桌面壁纸\");\r\n    try {\r\n      let res = await ipcasync(\"download\", { url, path });\r\n      wallpaper.set(res);\r\n      setPanding(false);\r\n    } catch (error) {\r\n      setPanding(false);\r\n      message.info(`网络异常未能全部下载成功`);\r\n    }\r\n  };\r\n  const likehander = async (src, name, taghref) => {\r\n    message.info(name == \"set-like\" ? \"添加喜欢\" : \"取消喜欢\");\r\n    let res = await ipcasync(name, {\r\n      src,\r\n      href: taghref ? taghref : Modals.href,\r\n    });\r\n    taghref ? openlike(true) : setDetail(res);\r\n  };\r\n  const openlike = async () => {\r\n    let res = await ipcasync(\"init-like\");\r\n    if (res.length) {\r\n      getTitle(\"💖\");\r\n    } else {\r\n      message.info(`暂时没有收藏壁纸`);\r\n    }\r\n    console.log(res)\r\n    setResult(res);\r\n  };\r\n  const newFind = async (str, name) => {\r\n    try {\r\n      setPanding(`正在添加${name}壁纸`);\r\n      let data = await getHomePage(str ? str : \"pc/\");\r\n      let { dataArry, add } = await ipcasync(\"init-day-data\", {\r\n        data,\r\n      });\r\n      message.info(add == 0 ? \"本次无新增\" : `本次新增 ${add} 张`);\r\n      setResult(dataArry);\r\n    } catch (error) {\r\n      message.info(`加载失败`);\r\n      setResult([]);\r\n    }\r\n    setPanding(false);\r\n    setdownshow(false);\r\n  };\r\n  const antIcon = <SyncOutlined spin style={{ fontSize: 24 }} />;\r\n  return (\r\n    <div id=\"app\">\r\n      {panding && (\r\n        <div className=\"loading\">\r\n          <Spin indicator={antIcon} tip={panding} size=\"large\" />\r\n        </div>\r\n      )}\r\n      <Content\r\n        {...{\r\n          result,\r\n          saveWallpaper,\r\n          setWallpaper,\r\n          handerchilden,\r\n          details,\r\n          setDetail,\r\n          Modals,\r\n          setModal,\r\n          setheadless,\r\n          headless,\r\n          opendevtool,\r\n          deleteAll,\r\n          newFind,\r\n          _init,\r\n          isdown,\r\n          isdownshow,\r\n          likehander,\r\n          openlike,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default App;\r\n","F:\\code_git\\Today-wallpapers\\src\\Content\\Content.js",["32","33"],"import React from \"react\";\r\nimport { Modal, Button, Image, Dropdown, Menu, message, BackTop } from \"antd\";\r\nimport { openExternal } from \"../utils\";\r\nimport {\r\n  FolderOpenFilled,\r\n  FormatPainterFilled,\r\n  EyeInvisibleOutlined,\r\n  DeleteOutlined,\r\n  EyeOutlined,\r\n  CodeOutlined,\r\n  GithubOutlined,\r\n  MenuOutlined,\r\n  FileImageFilled,\r\n  MehFilled,\r\n  AlertFilled,\r\n  CarFilled,\r\n  DribbbleCircleFilled,\r\n  BankFilled,\r\n  GitlabFilled,\r\n  YoutubeFilled,\r\n  SkinFilled,\r\n  GiftFilled,\r\n  StarFilled,\r\n  DownloadOutlined,\r\n  GlobalOutlined,\r\n  RocketFilled,\r\n  HeartOutlined,\r\n  HeartFilled,\r\n} from \"@ant-design/icons\";\r\nexport default ({\r\n  result,\r\n  saveWallpaper,\r\n  setWallpaper,\r\n  handerchilden,\r\n  details,\r\n  Modals: { title },\r\n  setModal,\r\n  setDetail,\r\n  setheadless,\r\n  headless,\r\n  opendevtool,\r\n  deleteAll,\r\n  newFind,\r\n  _init,\r\n  isdown,\r\n  isdownshow,\r\n  likehander,\r\n  openlike,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <div className=\"justify-content-center\">\r\n        {result.map(({ srcmini, title, href, like, maxsrc: src }, index) => (\r\n          <div className=\"mb-1 pics\" key={title + index}>\r\n            <div\r\n              className=\"card\"\r\n              onClick={() => !like && handerchilden(title, href)}\r\n            >\r\n              {like ? (\r\n                <>\r\n                  <Image src={srcmini} preview={{ src }} className=\"like-img\" />\r\n                  <div className=\"like-title\">\r\n                    <span className=\"txtIcons len\">{title}</span>\r\n                    <HeartFilled\r\n                      title=\"取消喜欢\"\r\n                      onClick={() => likehander(src, \"set-dislike\", href)}\r\n                    />\r\n                    <FormatPainterFilled\r\n                      onClick={() => setWallpaper(src)}\r\n                      title=\"设置壁纸\"\r\n                    />\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <img src={srcmini} />\r\n                  <div className=\"content-overlay\"></div>\r\n                  <div className=\"content\">\r\n                    <p>{title}</p>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <Modal\r\n        title={title}\r\n        width=\"550\"\r\n        visible={title}\r\n        onCancel={() => setModal(false)}\r\n        closable={false}\r\n        footer={[\r\n          <Button\r\n            key=\"back\"\r\n            onClick={() => {\r\n              setModal(false);\r\n              setDetail([]);\r\n            }}\r\n          >\r\n            Return\r\n          </Button>,\r\n        ]}\r\n        maskClosable={false}\r\n        style={{ top: 30 }}\r\n      >\r\n        <div className=\"Modalcon\">\r\n          {details.map(({ maxsrc: src, srcmini, like = false }, index) => (\r\n            <div key={index}>\r\n              <Image\r\n                width={200}\r\n                height={129}\r\n                src={srcmini}\r\n                className=\"Modalimage\"\r\n                preview={{ src }}\r\n              />\r\n              <div className=\"icons\">\r\n                <div className=\"txtIcons\">\r\n                  {src.split(\"t_s\")[1]\r\n                    ? src.split(\"t_s\")[1].split(\"c5\")[0]\r\n                    : src.split(\"/\")[7]}\r\n                </div>\r\n                {like ? (\r\n                  <HeartFilled\r\n                    title=\"取消喜欢\"\r\n                    onClick={() => likehander(src, \"set-dislike\")}\r\n                  />\r\n                ) : (\r\n                  <HeartOutlined\r\n                    title=\"喜欢\"\r\n                    onClick={() => likehander(src, \"set-like\")}\r\n                  />\r\n                )}\r\n                <FolderOpenFilled onClick={saveWallpaper} title=\"下载图片\" />\r\n                <FormatPainterFilled\r\n                  onClick={() => setWallpaper(src)}\r\n                  title=\"设置壁纸\"\r\n                />\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </Modal>\r\n      <Dropdown\r\n        overlayClassName=\"drop-downs\"\r\n        className=\"drop-down\"\r\n        placement=\"topCenter\"\r\n        overlay={() => (\r\n          <Menu className=\"drop-downs-menu\">\r\n            <Menu.Item>\r\n              <MehFilled\r\n                className=\"icons-li\"\r\n                onClick={() => newFind(\"dongman/\", \"动漫\")}\r\n                title=\"动漫\"\r\n              />\r\n            </Menu.Item>\r\n            <Menu.Item>\r\n              <BankFilled\r\n                className=\"icons-li\"\r\n                onClick={() => newFind(\"jianzhu/\", \"建筑\")}\r\n                title=\"建筑\"\r\n              />\r\n            </Menu.Item>\r\n            <Menu.Item>\r\n              <GitlabFilled\r\n                className=\"icons-li\"\r\n                onClick={() => newFind(\"dongwu/\", \"动物\")}\r\n                title=\"动物\"\r\n              />\r\n            </Menu.Item>\r\n            <Menu.Item>\r\n              <YoutubeFilled\r\n                className=\"icons-li\"\r\n                onClick={() => newFind(\"meinv/\", \"美女\")}\r\n                title=\"美女\"\r\n              />\r\n            </Menu.Item>\r\n            <Menu.Item>\r\n              <SkinFilled\r\n                className=\"icons-li\"\r\n                onClick={() => newFind(\"jingwu/\", \"静物\")}\r\n                title=\"静物\"\r\n              />\r\n            </Menu.Item>\r\n            <Menu.Item>\r\n              <CarFilled\r\n                className=\"icons-li\"\r\n                onClick={() => newFind(\"qiche/\", \"汽车\")}\r\n                title=\"汽车\"\r\n              />\r\n            </Menu.Item>\r\n            <Menu.Item>\r\n              <GiftFilled\r\n                className=\"icons-li\"\r\n                onClick={() => newFind(\"jieri/\", \"节日\")}\r\n                title=\"节日\"\r\n              />\r\n            </Menu.Item>\r\n            <Menu.Item>\r\n              <DribbbleCircleFilled\r\n                className=\"icons-li\"\r\n                onClick={() => newFind(\"tiyu/\", \"体育\")}\r\n                title=\"体育\"\r\n              />\r\n            </Menu.Item>\r\n            <Menu.Item>\r\n              <AlertFilled\r\n                className=\"icons-li\"\r\n                onClick={() => newFind(\"chuangyi/\", \"创意\")}\r\n                title=\"创意\"\r\n              />\r\n            </Menu.Item>\r\n            <Menu.Item>\r\n              <FileImageFilled\r\n                className=\"icons-li\"\r\n                onClick={() => newFind(\"fengjing/\", \"风景\")}\r\n                title=\"风景\"\r\n              />\r\n            </Menu.Item>\r\n            <Menu.Item>\r\n              <StarFilled\r\n                className=\"icons-li\"\r\n                onClick={() => newFind(\"xingzuo/\", \"星座\")}\r\n                title=\"星座\"\r\n              />\r\n            </Menu.Item>\r\n          </Menu>\r\n        )}\r\n      >\r\n        <MenuOutlined title=\"风格\" />\r\n      </Dropdown>\r\n\r\n      <div className=\"icons_fix\">\r\n        <BackTop className=\"upicon\">\r\n          <RocketFilled title=\"回到顶部\" />\r\n        </BackTop>\r\n        <div\r\n          className=\"icons-num\"\r\n          onClick={() => message.info(`当前一共${result.length}套壁纸`)}\r\n        >\r\n          {result.length}\r\n        </div>\r\n        {isdownshow ? (\r\n          <GlobalOutlined onClick={() => _init()} title=\"查看全部集合\" />\r\n        ) : (\r\n          <DownloadOutlined\r\n            onClick={() => _init(true)}\r\n            title=\"查看已下载集合\"\r\n          />\r\n        )}\r\n        <HeartOutlined onClick={openlike} title=\"喜欢\" />\r\n        <CodeOutlined onClick={opendevtool} title=\"控制台\" />\r\n        {headless ? (\r\n          <EyeInvisibleOutlined\r\n            onClick={() => setheadless(false)}\r\n            title=\"显示爬虫\"\r\n          />\r\n        ) : (\r\n          <EyeOutlined onClick={() => setheadless(true)} title=\"隐藏爬虫\" />\r\n        )}\r\n        <GithubOutlined\r\n          onClick={() =>\r\n            openExternal(\"https://github.com/blazer233/Today-wallpapers\")\r\n          }\r\n          title=\"访问github\"\r\n        />\r\n        <DeleteOutlined\r\n          title=\"全部删除\"\r\n          onClick={() => {\r\n            Modal.error({\r\n              title: \"是否删除数据库全部数据\",\r\n              content: \"删除后无法恢复只能重新下载\",\r\n              onOk: deleteAll,\r\n              maskClosable: true,\r\n              okText: \"确认\",\r\n            });\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","F:\\code_git\\Today-wallpapers\\src\\utils.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":12,"column":1,"nodeType":"40","endLine":63,"endColumn":3},{"ruleId":"41","severity":1,"message":"42","line":31,"column":28,"nodeType":"43","endLine":31,"endColumn":30,"suggestions":"44"},{"ruleId":"45","severity":1,"message":"46","line":147,"column":23,"nodeType":"47","messageId":"48","endLine":147,"endColumn":25},{"ruleId":"45","severity":1,"message":"46","line":171,"column":24,"nodeType":"47","messageId":"48","endLine":171,"endColumn":26},{"ruleId":"38","severity":1,"message":"39","line":30,"column":1,"nodeType":"40","endLine":282,"endColumn":3},{"ruleId":"49","severity":1,"message":"50","line":76,"column":19,"nodeType":"51","endLine":76,"endColumn":40},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: '_init'. Either include it or remove the dependency array.","ArrayExpression",["54"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},"Update the dependencies array to be: [_init]",{"range":"57","text":"58"},[1275,1277],"[_init]"]