[{"D:\\Today-wallpaper\\src\\index.js":"1","D:\\Today-wallpaper\\src\\App.js":"2","D:\\Today-wallpaper\\src\\Content\\index.js":"3","D:\\Today-wallpaper\\src\\Content\\Content.js":"4"},{"size":204,"mtime":1612587488074,"results":"5","hashOfConfig":"6"},{"size":113,"mtime":1612587488072,"results":"7","hashOfConfig":"6"},{"size":6498,"mtime":1612756153782,"results":"8","hashOfConfig":"6"},{"size":5337,"mtime":1612773997761,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1wrlmlf",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"12"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},"D:\\Today-wallpaper\\src\\index.js",[],["22","23"],"D:\\Today-wallpaper\\src\\App.js",["24"],"import React from \"react\";\r\nimport Content from \"./Content\";\r\nexport default () => {\r\n  return <Content />;\r\n};\r\n","D:\\Today-wallpaper\\src\\Content\\index.js",["25"],"import React, { useEffect, useState } from \"react\";\r\nimport Content from \"./Content\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\nimport { Spin, message } from \"antd\";\r\nconst {\r\n  ipcRenderer,\r\n  shell: { openExternal },\r\n  remote: {\r\n    dialog: { showOpenDialogSync },\r\n  },\r\n} = window.require(\"electron\");\r\nconst wallpaper = window.require(\"wallpaper\");\r\nconst puppeteer = window.require(\"puppeteer\");\r\nconst ipcasync = async (name, obj = null) => {\r\n  ipcRenderer.send(name, obj);\r\n  return await new Promise(resolve => {\r\n    ipcRenderer.on(`${name}-reply`, (event, arg) => resolve(arg));\r\n  });\r\n};\r\nconst App = () => {\r\n  const [result, setResult] = useState([]);\r\n  const [details, setDetail] = useState([]);\r\n  const [Modals, setModal] = useState(\"\");\r\n  const [screenSize, setScreenSize] = useState({});\r\n  const [path, setPath] = useState(\"\");\r\n  const [headless, setheadless] = useState(true);\r\n  const [panding, setPanding] = useState(\"\");\r\n  const config = {\r\n    headless,\r\n    executablePath:\r\n      \"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\",\r\n    args: [\"--no-sandbox\", \"--disable-setuid-sandbox\"],\r\n  };\r\n  const _init = async () => {\r\n    setPanding(\"努力加载中...第一次加载时间会比较长~~~\");\r\n    let res = await ipcasync(\"init-homepage\");\r\n    let resScreen = await ipcasync(\"init-imgsize\");\r\n    setScreenSize(resScreen);\r\n    res ? setResult(res) : newFind();\r\n    setPanding(false);\r\n  };\r\n  useEffect(() => _init(), []);\r\n  const getHomePage = async url => {\r\n    let urls = \"http://desk.zol.com.cn/\" + url;\r\n    const browser = await puppeteer.launch(config);\r\n    const page = await browser.newPage();\r\n    await page.goto(urls);\r\n    await page.waitForSelector(\".wrapper\", { visible: true });\r\n    const arr = await page.$$eval(\".main>ul a\", el =>\r\n      el.map(i => ({\r\n        href: \"http://desk.zol.com.cn\" + i.getAttribute(\"href\"),\r\n        srcmini: i.firstChild.getAttribute(\"src\"),\r\n        title: i.firstChild.getAttribute(\"title\"),\r\n        children: [],\r\n      }))\r\n    );\r\n    browser.close();\r\n    return arr;\r\n  };\r\n  const getPages = async (url, screen = \"1920x1080\") => {\r\n    const browser = await puppeteer.launch(config);\r\n    const page = await browser.newPage();\r\n    await page.goto(url);\r\n    const all = await page.$eval(\".wrapper span\", el => el.textContent);\r\n    const allPage = all.split(\"/\")[1].replace(\"）\", \"\");\r\n    console.log(\"开始\", url);\r\n    await page.waitForSelector(\".wrapper\", { visible: true });\r\n    const arr = await page.$$eval(\"#showImg li a\", el =>\r\n      el.map(i => ({\r\n        href: \"http://desk.zol.com.cn\" + i.getAttribute(\"href\"),\r\n        srcmini:\r\n          i.firstElementChild.getAttribute(\"src\") ||\r\n          i.firstElementChild.getAttribute(\"srcs\"),\r\n      }))\r\n    );\r\n    for (let i = 0; i < arr.length; i++) {\r\n      i && setPanding(`总共爬取 ${allPage} 张,当前爬取第 ${i} 张`);\r\n      await page.goto(arr[i].href);\r\n      await page.waitForSelector(`#tagfbl`, { visible: true });\r\n      const hrefItems = await page.evaluate(el => {\r\n        return document.querySelector(el)\r\n          ? document.querySelector(el).getAttribute(\"href\")\r\n          : document.querySelector(`a[id=\"1920x1080\"]`)\r\n            ? document.querySelector(`a[id=\"1920x1080\"]`).getAttribute(\"href\")\r\n            : document.querySelector(`#tagfbl a`).getAttribute(\"href\");\r\n      }, `a[id=\"${screen}\"]`);\r\n      await page.goto(\"http://desk.zol.com.cn\" + hrefItems);\r\n      await page.waitForSelector(\"body img\", { visible: true });\r\n      const hrefItem = await page.$eval(\"body img\", el => el.src);\r\n      arr[i].maxsrc = hrefItem;\r\n      details.push(arr[i])\r\n      setDetail(details);\r\n      console.log(details)\r\n    }\r\n    setPanding(`爬取完成。请稍后`);\r\n    browser.close();\r\n  };\r\n  const handerchilden = async (title, href) => {\r\n    console.log(title, href);\r\n    setModal(title);\r\n    setPanding(\"正在从数据库拉取数据~~~\");\r\n    let res = await ipcasync(\"init-collect\", href);\r\n    if (res) {\r\n      setDetail(res);\r\n    } else {\r\n      try {\r\n        setPanding(\"数据库未查询到，正在拉取新数据~~~\");\r\n        let { width, height } = screenSize;\r\n        await getPages(href, `${width}x${height}`);\r\n      } catch (error) {\r\n        message.info(`网络异常未能全部下载成功`);\r\n        setDetail(details);\r\n      }\r\n      ipcasync(\"init-collect-add\", { href, resultHref: details });\r\n    }\r\n    setPanding(false);\r\n  };\r\n  const opendevtool = async () => await ipcasync(\"init-devtool\");\r\n  const deleteAll = async () => {\r\n    setResult([]);\r\n    setPanding(`删除全部壁纸重新获取......`);\r\n    let res = await ipcasync(\"init-delete\");\r\n    res && _init();\r\n  };\r\n  const saveWallpaper = () => {\r\n    const filepath = showOpenDialogSync({\r\n      properties: [\"openDirectory\", \"createDirectory\", \"promptToCreate\"],\r\n    });\r\n    console.log(filepath)\r\n    setPath(filepath && filepath[0]);\r\n  };\r\n  const setWallpaper = async url => {\r\n    setPanding(\"正在设置桌面壁纸\");\r\n    try {\r\n      let res = await ipcasync(\"download\", { url, path });\r\n      wallpaper.set(res);\r\n      setPanding(false);\r\n    } catch (error) {\r\n      setPanding(false);\r\n      message.info(`网络异常未能全部下载成功`);\r\n    }\r\n\r\n  };\r\n  const newFind = async (str, name) => {\r\n    try {\r\n      setPanding(`正在添加${name}壁纸`);\r\n      let data = await getHomePage(str ? str : \"pc/\");\r\n      let { dataArry, add } = await ipcasync(\"init-day-data\", {\r\n        data,\r\n      });\r\n      message.info(`本次新增 ${add} 张`);\r\n      setResult(dataArry);\r\n    } catch (error) {\r\n      message.info(`加载失败`);\r\n      setResult([]);\r\n    }\r\n    setPanding(false);\r\n  };\r\n  const antIcon = <SyncOutlined spin style={{ fontSize: 24 }} />;\r\n  return (\r\n    <div id=\"app\">\r\n      {panding && (\r\n        <div className=\"loading\">\r\n          <Spin indicator={antIcon} tip={panding} size=\"large\" />\r\n        </div>\r\n      )}\r\n      {result.length > 0 && (\r\n        <Content\r\n          {...{\r\n            result,\r\n            saveWallpaper,\r\n            setWallpaper,\r\n            handerchilden,\r\n            details,\r\n            setDetail,\r\n            Modals,\r\n            setModal,\r\n            setheadless,\r\n            headless,\r\n            openExternal,\r\n            opendevtool,\r\n            deleteAll,\r\n            newFind,\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default App;\r\n","D:\\Today-wallpaper\\src\\Content\\Content.js",["26","27","28"],"import React from \"react\";\r\nimport { Modal, Button, Image, Collapse, message, BackTop } from \"antd\";\r\nimport {\r\n  FolderOpenFilled,\r\n  FormatPainterFilled,\r\n  EyeInvisibleOutlined,\r\n  DeleteOutlined,\r\n  EyeOutlined,\r\n  CodeOutlined,\r\n  GithubOutlined,\r\n  MenuOutlined,\r\n  FileImageFilled,\r\n  MehFilled,\r\n  AlertFilled,\r\n  CarFilled,\r\n  DribbbleCircleFilled,\r\n  BankFilled,\r\n  GitlabFilled,\r\n  YoutubeFilled,\r\n  SkinFilled,\r\n  GiftFilled,\r\n  StarFilled, SendOutlined\r\n} from \"@ant-design/icons\";\r\nconst { Panel } = Collapse;\r\nexport default ({\r\n  result,\r\n  saveWallpaper,\r\n  setWallpaper,\r\n  handerchilden,\r\n  details,\r\n  Modals,\r\n  setModal,\r\n  setDetail,\r\n  setheadless,\r\n  headless,\r\n  openExternal,\r\n  opendevtool,\r\n  deleteAll,\r\n  newFind\r\n}) => (\r\n  <div>\r\n    <div className=\"justify-content-center\">\r\n      {result.map(({ srcmini, title, href }, index) => (\r\n        <div className=\"mb-1 pics\" key={title + index}>\r\n          <div className=\"card\" onClick={() => handerchilden(title, href)}>\r\n            <img src={srcmini} />\r\n            <div className=\"content-overlay\"></div>\r\n            <div className=\"content\">\r\n              <p>{title}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n    <Modal\r\n      title={Modals}\r\n      width=\"550\"\r\n      visible={Modals}\r\n      onCancel={() => setModal(false)}\r\n      closable={false}\r\n      footer={\r\n        [<Button\r\n          key=\"back\"\r\n          onClick={() => {\r\n            setModal(false);\r\n            setDetail([]);\r\n          }}\r\n        >\r\n          Return\r\n                </Button>\r\n        ]\r\n      }\r\n      maskClosable={false}\r\n      style={{ top: 30 }}\r\n    >\r\n      <div className=\"Modalcon\">\r\n        {details.map(({ maxsrc, srcmini }, index) => (\r\n          <div key={index}>\r\n            <Image\r\n              width={200}\r\n              height={129}\r\n              src={srcmini}\r\n              className=\"Modalimage\"\r\n              preview={{\r\n                src: maxsrc,\r\n              }}\r\n            />\r\n            <div className=\"icons\">\r\n              <div className=\"txtIcons\">\r\n                {maxsrc.split(\"t_s\")[1]\r\n                  ? maxsrc.split(\"t_s\")[1].split(\"c5\")[0]\r\n                  : maxsrc.split(\"/\")[7]}\r\n              </div>\r\n              <FolderOpenFilled onClick={saveWallpaper} title=\"下载图片\" />\r\n              <FormatPainterFilled\r\n                onClick={() => setWallpaper(maxsrc)}\r\n                title=\"设置壁纸\"\r\n              />\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Modal>\r\n    <Collapse ghost>\r\n      <Panel\r\n        header={<MenuOutlined title=\"风格\" />}\r\n        showArrow={false}\r\n        forceRender={true}\r\n        className=\"CollapseControl\"\r\n      >\r\n        <div className=\"typesIcon\">\r\n          <MehFilled\r\n            onClick={() => newFind(\"dongman/\", \"动漫\")}\r\n            title=\"动漫\"\r\n          />\r\n          <BankFilled\r\n            onClick={() => newFind(\"jianzhu/\", \"建筑\")}\r\n            title=\"建筑\"\r\n          />\r\n          <GitlabFilled\r\n            onClick={() => newFind(\"dongwu/\", \"动物\")}\r\n            title=\"动物\"\r\n          />\r\n          <YoutubeFilled\r\n            onClick={() => newFind(\"meinv/\", \"美女\")}\r\n            title=\"美女\"\r\n          />\r\n          <SkinFilled\r\n            onClick={() => newFind(\"jingwu/\", \"静物\")}\r\n            title=\"静物\"\r\n          />\r\n          <CarFilled onClick={() => newFind(\"qiche/\", \"汽车\")} title=\"汽车\" />\r\n          <GiftFilled\r\n            onClick={() => newFind(\"jieri/\", \"节日\")}\r\n            title=\"节日\"\r\n          />\r\n          <StarFilled\r\n            onClick={() => newFind(\"xingzuo/\", \"星座\")}\r\n            title=\"星座\"\r\n          />\r\n          <FileImageFilled\r\n            onClick={() => newFind(\"fengjing/\", \"风景\")}\r\n            title=\"风景\"\r\n          />\r\n          <AlertFilled\r\n            onClick={() => newFind(\"chuangyi/\", \"创意\")}\r\n            title=\"创意\"\r\n          />\r\n          <DribbbleCircleFilled\r\n            onClick={() => newFind(\"tiyu/\", \"体育\")}\r\n            title=\"体育\"\r\n          />\r\n        </div>\r\n      </Panel>\r\n    </Collapse>\r\n\r\n    <div className=\"icons_fix\">\r\n      <BackTop>\r\n        <SendOutlined title=\"回到顶部\" className='upicon' rotate={270} />\r\n      </BackTop>\r\n      {/* <div style={{ 'cursor': 'pointer' }} onClick={() => message.info(`当前一共${result.length}套壁纸`)}>\r\n        {result.length}</div> */}\r\n      <DeleteOutlined title=\"全部删除\" onClick={() => {\r\n        Modal.error({\r\n          title: '是否删除数据库全部数据',\r\n          content: '删除后无法恢复只能重新下载',\r\n          onOk: deleteAll,\r\n          maskClosable: true,\r\n          okText: '确认'\r\n        })\r\n      }} />\r\n      <CodeOutlined onClick={opendevtool} title=\"控制台\" />\r\n      {headless ? (\r\n        <EyeInvisibleOutlined\r\n          onClick={() => setheadless(false)}\r\n          title=\"显示爬虫\"\r\n        />\r\n      ) : (\r\n          <EyeOutlined onClick={() => setheadless(true)} title=\"隐藏爬虫\" />\r\n        )}\r\n      <GithubOutlined\r\n        onClick={() =>\r\n          openExternal(\"https://github.com/blazer233/Today-wallpaper/tree/react-store-puppeteer\")\r\n        }\r\n        title=\"访问github\"\r\n      />\r\n    </div>\r\n  </div >\r\n);\r\n\r\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":3,"column":1,"nodeType":"35","endLine":5,"endColumn":3},{"ruleId":"36","severity":1,"message":"37","line":42,"column":28,"nodeType":"38","endLine":42,"endColumn":30,"suggestions":"39"},{"ruleId":"40","severity":1,"message":"41","line":2,"column":42,"nodeType":"42","messageId":"43","endLine":2,"endColumn":49},{"ruleId":"33","severity":1,"message":"34","line":25,"column":1,"nodeType":"35","endLine":189,"endColumn":3},{"ruleId":"44","severity":1,"message":"45","line":46,"column":13,"nodeType":"46","endLine":46,"endColumn":34},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: '_init'. Either include it or remove the dependency array.","ArrayExpression",["49"],"no-unused-vars","'message' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [_init]",{"range":"52","text":"53"},[1459,1461],"[_init]"]